import asyncio
import logging
from random import choice
from aiogram.types import ContentType
from dacite import from_dict
from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, CommandStart, Text
from config import API_TOKEN, BOT_NAME, MEDIA_PATH
from controllers import UserController
from database import Database
from forms import UserProfileForm, EventForm
from keyboards import enter_user_form_kb, cancel_reply_kb, main_reply_kb, menu_inline_kb, location_reply_kb, \
    self_invite_link_reply_kb, period_selection_reply_kb
from models import UserProfile, EventData, UserData
from utils import download_image, translate

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
database = Database()
user_controller = UserController(database)


@dp.message_handler(CommandStart())
async def start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç!!! üëã\n–Ø {BOT_NAME}, –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –≤ —Ä–∞–º–∫–∞—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ú–ò–°–ò–°. \n–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ –¥—Ä—É–≥–∞ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤—Ä–µ–º—è, —Ç—ã –æ–±—Ä–∞—Ç–∏–ª—Å—è –ø–æ –∞–¥—Ä–µ—Å—É üòâ", reply_markup=main_reply_kb)
    await asyncio.sleep(1)
    await message.answer(f"–†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ, —á—Ç–æ–±—ã —è —Å–º–æ–≥ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—é–¥–µ–π –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º",
                         reply_markup=enter_user_form_kb)


@dp.message_handler(commands='menu', state='*')
@dp.message_handler(Text(equals='–º–µ–Ω—é', ignore_case=True))
async def start(message: types.Message):
    await message.answer("–≠—Ç–æ –º–µ–Ω—é –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è, –∑–¥–µ—Å—å –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω—ã –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–º–∞–Ω–¥—ã", reply_markup=menu_inline_kb)


@dp.message_handler(Text(equals='–ò—Å–∫–∞—Ç—å –ª—é–¥–µ–π', ignore_case=True))
async def start(message: types.Message):
    user_data = choice(user_controller.get_all_users())

    with open(user_data.image, 'rb') as image:
        await message.answer_photo(image, f"{user_data.name} {user_data.age} –∫—É—Ä—Å \n–ì—Ä—É–ø–ø–∞: {user_data.team} \n{user_data.description}", reply_markup=
                                   types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ü–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è", url=f"tg://user?id={user_data.id}")))
    # await message.answer(choice(user_data))


# –≤—ã—Ö–æ–¥ –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è

@dp.message_handler(commands='cancel', state='*')
@dp.message_handler(Text(contains='–æ—Ç–º–µ–Ω–∏—Ç—å', ignore_case=True), state='*')
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return

    logging.info('Cancelling state %r', current_state)
    await state.finish()
    await message.answer("–û–∫, –∑–∞–∫–æ–Ω—á–∏–º –ø–æ–∑–∂–µ", reply_markup=main_reply_kb)


# ----------------------------–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è------------------------------------

@dp.callback_query_handler(lambda clb: clb.data == 'start_user_form')
async def start_user_form_handler(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–û–∫, –¥–∞–≤–∞–π –Ω–∞—á–Ω–µ–º. –ö–∞–∫ –¥—Ä—É–≥–∏–µ —Å–º–æ–≥—É—Ç –∫ —Ç–µ–±–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?", reply_markup=cancel_reply_kb)
    await bot.answer_callback_query(callback_query.id)
    await UserProfileForm.name.set()


@dp.message_handler(state=UserProfileForm.name)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(f"–û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ, {message.text}. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏, –Ω–∞ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ —Ç—ã —Å–µ–π—á–∞—Å —É—á–∏—à—å—Å—è", reply_markup=cancel_reply_kb)
    await UserProfileForm.next()


@dp.message_handler(lambda message: not message.text.isdigit(), state=UserProfileForm.age)
async def process_age_invalid(message: types.Message, state: FSMContext):
    return await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –∫—É—Ä—Å–∞ —á–∏—Å–ª–æ–º", reply_markup=cancel_reply_kb)


@dp.message_handler(state=UserProfileForm.age)
async def process_age(message: types.Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.answer(f"–ü–æ–Ω—è–ª")
    await asyncio.sleep(1)
    await message.answer(f"–ö–∞–∫–∞—è —Ç–≤–æ—è –≥—Ä—É–ø–ø–∞, —Ç–∞–∫ —è —Å–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", reply_markup=cancel_reply_kb)
    await UserProfileForm.next()


@dp.message_handler(state=UserProfileForm.team)
async def process_team(message: types.Message, state: FSMContext):
    await state.update_data(team=message.text)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ. –†–∞—Å—Å–∫–∞–∂–∏ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ", reply_markup=cancel_reply_kb)
    await UserProfileForm.next()


@dp.message_handler(state=UserProfileForm.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –∞–≤–∞—Ç–∞—Ä–∫—É", reply_markup=cancel_reply_kb)
    await UserProfileForm.next()


@dp.message_handler(content_types=ContentType.PHOTO, state=UserProfileForm.image)
async def process_team(message: types.Message, state: FSMContext):
    path = await download_image(MEDIA_PATH, message.photo[-1])
    await state.update_data(image=path)
    data = from_dict(UserProfile, await state.get_data())
    user_controller.create_user(UserData(
        message.from_user.id, data.name, data.age, data.team, data.description, 1, data.image
        ))
    await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–Ω!", reply_markup=main_reply_kb)
    await state.finish()


# ----------------------------–§–æ—Ä–º–∞ —Å–æ–±—ã—Ç–∏—è/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è------------------------------------


@dp.callback_query_handler(lambda clb: clb.data == 'start_event_form')
async def start_event_form_handler(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer(translate("–î–∞–≤–∞–π –∑–∞–ø–æ–ª–Ω–∏–º —Ñ–æ—Ä–º—É —Å–æ–±—ã—Ç–∏—è/–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. \n–£–∫–∞–∂–∏ –º–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –ª–æ–∫–∞—Ü–∏—é"), reply_markup=location_reply_kb)
    await EventForm.location.set()


@dp.message_handler(state=EventForm.location, content_types=[ContentType.LOCATION, ContentType.TEXT])
async def process_location(message: types.Message, state: FSMContext):
    if not message.location:
        await state.update_data(location=message.text)
    else:
        await state.update_data(location=message.location)

    await message.answer(translate("–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ? \n–ï—Å–ª–∏ –≤—Ä–µ–º–µ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, –≤—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é"), reply_markup=period_selection_reply_kb)
    await EventForm.next()


@dp.message_handler(state=EventForm.period)
async def process_period(message: types.Message, state: FSMContext):
    await state.update_data(period=message.text)
    await message.answer(translate("–û—Ç–ø—Ä–∞–≤—å –æ–ø–∏—Å–∞–Ω–∏–µ"))
    await EventForm.next()


@dp.message_handler(state=EventForm.description)
async def process_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer(translate("–ß—Ç–æ–±—ã –ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ –∏–ª–∏ —É–∑–Ω–∞—Ç—å –æ –Ω–µ–º –±–æ–ª—å—à–µ, –¥–∞–π –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –ª—é–¥–∏ —Å–º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–±–µ"), reply_markup=self_invite_link_reply_kb)
    await EventForm.next()


@dp.message_handler(state=EventForm.invite_link)
async def process_invite_link(message: types.Message, state: FSMContext):
    await state.update_data(invite_link=message.text)
    await message.answer(translate("–ò –Ω–∞–∫–æ–Ω–µ—Ü, –ø—Ä–∏—à–ª–∏ –∫–∞–∫–æ–µ-–Ω–∏–±—É–¥—å —Ñ–æ—Ç–æ —á—Ç–æ–±—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –ª—é–¥–µ–π)"))
    await EventForm.next()


@dp.message_handler(state=EventForm.image, content_types=ContentType.PHOTO)
async def process_event_image(message: types.Message, state: FSMContext):
    # path = await download_image(MEDIA_PATH, message.photo[-1])
    # await state.update_data(image=path)
    await message.answer(translate("–í—Å–µ –≥–æ—Ç–æ–≤–æ!"))
    state_data = await state.get_data()
    # data = from_dict(EventData, state_data)
    await message.answer(state_data, reply_markup=main_reply_kb)
    await state.finish()





@dp.callback_query_handler(lambda clb: clb.data == 'turn_off_activity')
async def turn_off_user_activity(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–û–∫, —Ç–µ–ø–µ—Ä—å –≤—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ø–æ–¥–±–æ—Ä–∫–µ —É –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π üôà", reply_markup=main_reply_kb)


@dp.callback_query_handler(lambda clb: clb.data == 'turn_on_activity')
async def turn_on_user_activity(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await callback_query.message.answer("–¢–µ–ø–µ—Ä—å —Ç–µ–±—è –≤–∏–¥—è—Ç –¥—Ä—É–≥–∏–µ –ª—é–¥–∏", reply_markup=main_reply_kb)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

